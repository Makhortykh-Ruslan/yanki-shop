{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment.prod';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.error$ = new Subject();\n      this.success$ = new Subject();\n    }\n\n    get getToken() {\n      return localStorage.getItem('idToken');\n    }\n\n    logOut() {\n      this.setToken(null);\n    }\n\n    isAuth() {\n      return this.getToken;\n    }\n\n    registration(newCustomer) {\n      return this.http.post(`${environment.api}/customers`, newCustomer);\n    }\n\n    login(user) {\n      return this.http.post(`${environment.api}/customers/login`, user).pipe(tap(this.setToken));\n    }\n\n    getCustomer() {\n      return this.http.get(`${environment.api}/customers/customer`);\n    }\n\n    setToken(response) {\n      if (response) {\n        localStorage.setItem('idToken', response.token);\n      } else {\n        localStorage.clear();\n      }\n    }\n\n    handleError(error) {\n      const {\n        password,\n        loginOrEmail,\n        telephone,\n        email,\n        message,\n        login\n      } = error.error;\n\n      switch (password || loginOrEmail || telephone || email || message || login) {\n        case 'INVALID_EMAIL':\n          this.error$.next('Некорректный email');\n          break;\n\n        case 'Password incorrect':\n          this.error$.next('Неверный пароль');\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          this.error$.next('Нет такого email');\n          break;\n\n        case 'Customer not found':\n          this.error$.next('Нет такого пользователя');\n          break;\n\n        case 'That is not a valid phone number.':\n          this.error$.next('Не правильный номер телефона, используйте формат +380999999999');\n          break;\n\n        case 'That is not a valid email':\n          this.error$.next('Не валидный емайл');\n          break;\n\n        case 'Allowed characters for login is a-z, A-Z, 0-9.':\n          this.error$.next('Для Логина допустимые символы для входа: a-z, A-Z, 0-9.');\n          break;\n\n        case message:\n          const array = message.split(' ');\n          const resultEmail = array.includes('Email') ? `Email ${array[1]} уже используется` : '';\n          const resultLogin = array.includes('Login') ? `Логин ${array[1]} уже используется` : '';\n          const result = resultEmail || resultLogin;\n          this.error$.next(result);\n          break;\n\n        default:\n          this.error$.next('Неизвестная ошибка спросите у Руслана что произошло makhortykh.ruslan@gmail.com');\n      }\n\n      return throwError(error);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}