{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NotificationsService = /*#__PURE__*/(() => {\n  class NotificationsService {\n    constructor() {\n      this.preloader$ = new BehaviorSubject(false);\n      this.notificationSubject = new Subject();\n      this.counter = 0;\n    }\n\n    notificationPreloader(value) {// this.preloader$.next(value);\n    }\n\n    notificationDialogSuccess(text, data) {\n      this.notificationSubject.next({\n        type: 'success',\n        text,\n        data\n      });\n    }\n\n    notificationDialogError(text) {\n      this.notificationSubject.next({\n        type: 'error',\n        text\n      });\n    }\n\n    setErrorPreloader() {\n      this.preloader$.next(false);\n    }\n\n    setPreloaderState(type) {\n      if (type === 0) {\n        this.counter++;\n      } else {\n        this.counter--;\n      }\n\n      if (this.counter === 0) {\n        this.preloader$.next(false);\n      } else {\n        this.preloader$.next(true);\n      }\n    }\n\n  }\n\n  NotificationsService.ɵfac = function NotificationsService_Factory(t) {\n    return new (t || NotificationsService)();\n  };\n\n  NotificationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationsService,\n    factory: NotificationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NotificationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}